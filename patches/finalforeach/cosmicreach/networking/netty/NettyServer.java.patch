--- a/finalforeach/cosmicreach/networking/netty/NettyServer.java
+++ b/finalforeach/cosmicreach/networking/netty/NettyServer.java
@@ -4,7 +_,9 @@
 import com.badlogic.gdx.utils.ObjectMap;
 import finalforeach.cosmicreach.accounts.Account;
 import finalforeach.cosmicreach.entities.player.Player;
+import finalforeach.cosmicreach.accounts.Account;
 import finalforeach.cosmicreach.networking.common.NetworkIdentity;
+import finalforeach.cosmicreach.networking.netty.packets.DisconnectPacket;
 import finalforeach.cosmicreach.networking.server.ServerIdentity;
 import finalforeach.cosmicreach.networking.server.ServerSingletons;
 import io.netty.bootstrap.ServerBootstrap;
@@ -16,14 +_,25 @@
 import io.netty.channel.nio.NioEventLoopGroup;
 import io.netty.channel.socket.SocketChannel;
 import io.netty.channel.socket.nio.NioServerSocketChannel;
+import org.apache.logging.log4j.core.jmx.Server;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.net.InetSocketAddress;
 
 public class NettyServer {
 	private int port;
-	Array<ServerIdentity> connections = new Array<>();
-	ObjectMap<ChannelHandlerContext, ServerIdentity> contextToIdentity = new ObjectMap<>();
-
+
+	public Array<ServerIdentity> connections = new Array<>();
+	public ObjectMap<ChannelHandlerContext, ServerIdentity> contextToIdentity = new ObjectMap<>();
+	public ChannelFuture channelfuture;
+	public	EventLoopGroup eventloopgroup;
+	public	EventLoopGroup eventloopgroup1;
+
+    private final Logger LOGGER = LoggerFactory.getLogger("Cosmic Reach | Server");
 	public NettyServer(int port) {
 		this.port = port;
+		LOGGER.info("Using port: {}",port);
 	}
 
 	public NettyServer() {
@@ -31,8 +_,8 @@
 	}
 
 	public void run() throws Exception {
-		EventLoopGroup eventloopgroup = new NioEventLoopGroup();
-		EventLoopGroup eventloopgroup1 = new NioEventLoopGroup();
+		eventloopgroup = new NioEventLoopGroup();
+		eventloopgroup1 = new NioEventLoopGroup();
 
 		try {
 			ServerBootstrap serverbootstrap = new ServerBootstrap();
@@ -41,9 +_,10 @@
 					ch.pipeline().addLast(new ByteArrayDataEncoder(), new ByteArrayDataDecoder(), new ServerHandler(NettyServer.this));
 				}
 			}).option(ChannelOption.SO_BACKLOG, Integer.valueOf(128)).childOption(ChannelOption.SO_KEEPALIVE, true);
-			ChannelFuture channelfuture = serverbootstrap.bind(this.port).sync();
+			channelfuture = serverbootstrap.bind(this.port).sync();
 			channelfuture.channel().closeFuture().sync();
 		} finally {
+			ServerSingletons.puzzle.exit();
 			eventloopgroup1.shutdownGracefully();
 			eventloopgroup.shutdownGracefully();
 		}
@@ -52,10 +_,12 @@
 	public void broadcast(GamePacket packet) {
 		packet.setupAndSendToAll(this.connections);
 	}
-
 	public void broadcastAsServerExcept(GamePacket packet, NetworkIdentity identity) {
 		packet.setupAndSendToAllExcept(this.connections, identity);
 	}
+	public void send(GamePacket packet, ChannelHandlerContext ctx) {
+		packet.setupAndSend(ctx);
+	}
 
 	public void addContext(ChannelHandlerContext ctx) {
 		ServerIdentity serveridentity = new ServerIdentity(this, ctx);
@@ -65,6 +_,9 @@
 
 	public void removeContext(ChannelHandlerContext ctx) {
 		ServerIdentity serveridentity = this.contextToIdentity.get(ctx);
+		var addy = ((InetSocketAddress)ctx.channel().remoteAddress());
+		if(!serveridentity.waskicked)
+			LOGGER.info( "Player uid '{}' left | {}:{}", getAccount(ctx).getUniqueId(),addy.getAddress().getHostAddress() ,addy.getPort());
 		this.connections.removeValue(serveridentity, true);
 		this.contextToIdentity.remove(ctx);
 		Player player = ServerSingletons.getPlayer(serveridentity);
@@ -76,6 +_,7 @@
 	public int getPort() {
 		return this.port;
 	}
+
 
 	public Account getAccount(ChannelHandlerContext ctx) {
 		ServerIdentity serveridentity = this.contextToIdentity.get(ctx);
