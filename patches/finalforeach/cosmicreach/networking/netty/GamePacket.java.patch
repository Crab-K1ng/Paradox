--- a/finalforeach/cosmicreach/networking/netty/GamePacket.java
+++ b/finalforeach/cosmicreach/networking/netty/GamePacket.java
@@ -8,6 +_,8 @@
 import com.badlogic.gdx.utils.ObjectIntMap;
 import com.badlogic.gdx.utils.ObjectMap;
 import com.badlogic.gdx.utils.Json.Serializable;
+import com.github.puzzle.paradox.game.event.PacketEvents;
+import com.github.puzzle.paradox.game.server.packets.ModIdentificationPacket;
 import finalforeach.cosmicreach.blocks.BlockPosition;
 import finalforeach.cosmicreach.io.ByteArrayUtils;
 import finalforeach.cosmicreach.networking.common.NetworkIdentity;
@@ -26,10 +_,11 @@
 import finalforeach.cosmicreach.networking.netty.packets.blocks.PlaceBlockPacket;
 import finalforeach.cosmicreach.networking.server.ServerIdentity;
 import finalforeach.cosmicreach.util.ArrayUtils;
-import finalforeach.cosmicreach.util.logging.Logger;
 import finalforeach.cosmicreach.world.Zone;
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;
+import org.slf4j.LoggerFactory;
+
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.nio.charset.StandardCharsets;
@@ -38,12 +_,17 @@
 public abstract class GamePacket {
 	public static Json json = new Json();
 	public short packetID;
+
+	public boolean shouldGameIgnore = false;
 	public ByteArray backingArray = new ByteArray();
 	protected static IntMap<Supplier<? extends GamePacket>> idsToPackets = new IntMap<>();
+
+	private static int vanillaPacketIndex = 0;
 	protected static ObjectIntMap<Class<? extends GamePacket>> packetsToIntIds = new ObjectIntMap<>();
 	protected static ObjectIntMap<String> packetNamesToIntIds = new ObjectIntMap<>();
 	protected static ObjectMap<String, Class<? extends GamePacket>> packetNamesToClasses = new ObjectMap<>();
 
+   private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger("Cosmic Reach | Game packet");
 	public static void registerPackets() {
 		registerPacket(ProtocolSyncPacket.class);
 		registerPacket(TransactionPacket.class);
@@ -58,6 +_,8 @@
 		registerPacket(BreakBlockPacket.class);
 		registerPacket(InteractBlockPacket.class);
 		registerPacket(BlockReplacePacket.class);
+		registerPacket("client-identification-packet",9000, ModIdentificationPacket.class);
+		PacketEvents.ON_REGISTER_PACKETS.invoker().onRegisterPackets();
 	}
 
 	public static void clearRegistrations() {
@@ -67,6 +_,10 @@
 	}
 
 	public static <T extends GamePacket> void registerPacket(Class<T> packetClass) {
+		if(!packetClass.getName().startsWith("finalforeach.cosmicreach.networking")){
+			LOGGER.warn("Not registering packet: {}. Method reserved for vanilla packets. Please use registerPacket(String strId, int numId, Class<T> packetClass) instead.",packetClass.getName());
+			return;
+		}
 		String s = packetClass.getCanonicalName();
 		if (s == null) {
 			String s1 = "Packet class must have a canonical name";
@@ -80,11 +_,11 @@
 
 			throw new RuntimeException(s1);
 		} else {
-			registerPacket(s, idsToPackets.size + 1, packetClass);
+			registerPacket(s, ++vanillaPacketIndex, packetClass);
 		}
 	}
 
-	protected static <T extends GamePacket> void registerPacket(String strId, int numId, Class<T> packetClass) {
+	public static <T extends GamePacket> void registerPacket(String strId, int numId, Class<T> packetClass) {
 		try {
 			Constructor<T> constructor = packetClass.getDeclaredConstructor();
 			Supplier<T> supplier = () -> {
@@ -99,14 +_,14 @@
 			packetsToIntIds.put(packetClass, numId);
 			packetNamesToIntIds.put(strId, numId);
 			packetNamesToClasses.put(strId, packetClass);
-			Logger.info("Registered packet ( id = " + numId + " ):" + strId);
+         	LOGGER.info("Registered packet ( id = " + numId + " ):" + strId);
 		} catch (Exception exception) {
 			throw new RuntimeException(exception);
 		}
 	}
 
 	public GamePacket() {
-		this.packetID = (short)packetsToIntIds.get((Class<? extends GamePacket>)this.getClass(), 0);
+		this.packetID = (short)packetsToIntIds.get(this.getClass(), 0);
 		if (this.packetID == 0) {
 			throw new RuntimeException("Cannot send packet without registering it first!");
 		}
