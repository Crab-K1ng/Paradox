--- a/finalforeach/cosmicreach/networking/packets/meta/LoginPacket.java
+++ b/finalforeach/cosmicreach/networking/packets/meta/LoginPacket.java
@@ -1,22 +_,29 @@
 package finalforeach.cosmicreach.networking.packets.meta;
 
+import com.github.puzzle.paradox.game.event.PacketEvents;
+import com.github.puzzle.paradox.game.server.ParadoxServerSettings;
 import finalforeach.cosmicreach.accounts.Account;
 import finalforeach.cosmicreach.accounts.AccountItch;
 import finalforeach.cosmicreach.accounts.AccountOffline;
 import finalforeach.cosmicreach.networking.GamePacket;
 import finalforeach.cosmicreach.networking.NetworkIdentity;
 import finalforeach.cosmicreach.networking.NetworkSide;
+import finalforeach.cosmicreach.networking.packets.MessagePacket;
 import finalforeach.cosmicreach.networking.server.ServerSingletons;
 import finalforeach.cosmicreach.util.logging.Logger;
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;
 
+import java.net.InetSocketAddress;
+
+import static com.github.puzzle.paradox.core.PuzzlePL.SERVER_ACCOUNT;
+
 public class LoginPacket extends GamePacket {
 	public Account account;
 
 	public LoginPacket() {
 	}
-
+	private static final org.slf4j.Logger LOGGER = org.slf4j.LoggerFactory.getLogger("Cosmic Reach | Login Packet");
 	public LoginPacket(Account account) {
 		this.account = account;
 	}
@@ -44,7 +_,14 @@
 		if (identity.getSide() == NetworkSide.SERVER) {
 			Logger.debug("Received login packet from " + this.account.getUsername());
 			ServerSingletons.addAccount(identity, this.account);
-			Logger.info("Is it really " + this.account.getUsername() + "? I have no choice to believe so!");
+			var addy = ((InetSocketAddress)ctx.channel().remoteAddress());
+			LOGGER.info( "Player uid '{}' joined | {}:{}",this.account.getUniqueId(),addy.getAddress().getHostAddress() ,addy.getPort());
+			if(!ParadoxServerSettings.joinMessage.isEmpty()|| !ParadoxServerSettings.joinMessage.isBlank()){
+				var pack = new MessagePacket(ParadoxServerSettings.joinMessage);
+				pack.playerUniqueId = SERVER_ACCOUNT.getUniqueId();
+				ServerSingletons.SERVER.send(pack, ctx);
+			}
+			PacketEvents.ON_PLAYER_JOIN_EVENT.invoker().onPlayerJoin(account,identity,ctx);
 		}
 	}
 }
